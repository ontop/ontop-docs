(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{394:function(e,t,a){"use strict";a.r(t);var r=a(51),o=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"support-a-new-database-system"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#support-a-new-database-system"}},[e._v("#")]),e._v(" Support a new database system")]),e._v(" "),a("p",[e._v("This page describes how Ontop can be extended to support a novel relational database system (RDBMS).")]),e._v(" "),a("p",[e._v("The following RDBMSs are currently supported:")]),e._v(" "),a("ul",[a("li",[e._v("DB2")]),e._v(" "),a("li",[e._v("MySQL / MariaDB")]),e._v(" "),a("li",[e._v("Oracle")]),e._v(" "),a("li",[e._v("PostgreSQL")]),e._v(" "),a("li",[e._v("SQL server")]),e._v(" "),a("li",[e._v("H2")]),e._v(" "),a("li",[e._v("Denodo")]),e._v(" "),a("li",[e._v("Dremio")]),e._v(" "),a("li",[e._v("Apache Spark SQL & Databricks")]),e._v(" "),a("li",[e._v("Teiid")]),e._v(" "),a("li",[e._v("Snowflake")])]),e._v(" "),a("p",[e._v("It is relatively easy though to extend Ontop's source code in order to support an additional RDBMS, thanks to dependency injection.")]),e._v(" "),a("h2",{attrs:{id:"required-implementations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#required-implementations"}},[e._v("#")]),e._v(" Required implementations")]),e._v(" "),a("p",[e._v("Two implementations must be provided, each for a different interface that has already a default (abstract) implementation.")]),e._v(" "),a("p",[e._v("These implementations dictate what the datatypes of the RDBMS are and how certain function symbols can be translated into the SQL dialect supported by the RDBMS.")]),e._v(" "),a("p",[e._v("The default implementation of each of these interfaces is often sufficient to handle many query operators and functions.  As a result, only a few methods generally need to be overwritten,\nto account for specificities of the new SQL dialect.")]),e._v(" "),a("p",[e._v("The 2 required implementations are the DB function symbol factory and the DB datatype factory.")]),e._v(" "),a("h3",{attrs:{id:"db-function-symbol-factory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#db-function-symbol-factory"}},[e._v("#")]),e._v(" DB function symbol factory")]),e._v(" "),a("p",[e._v("The "),a("em",[e._v("DB function symbol factory")]),e._v(" provides function symbols\nwhich can be directly serialized into the target SQL dialect (e.g. "),a("code",[e._v("LENGTH")]),e._v(" or "),a("code",[e._v("CURRENT_TIMESTAMP")]),e._v("). This factory has methods for common operations with precise semantics (e.g. concatenating 3 string arguments in a null-rejecting manner).")]),e._v(" "),a("p",[e._v("The interface to implement is "),a("code",[e._v("DBFunctionSymbolFactory")]),e._v("."),a("br"),e._v("\nAnd the default implementation is "),a("code",[e._v("AbstractSQLDBFunctionSymbolFactory")]),e._v(".")]),e._v(" "),a("p",[e._v("For instance, the DB function symbol factory for PostgreSQL within Ontop is the class "),a("code",[e._v("PostgreSQLDBFunctionSymbolFactory")]),e._v(".")]),e._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),a("p",[e._v("This interface should not be confused with the "),a("code",[e._v("FunctionSymbolFactory")]),e._v(", which is in charge of constructing\nSPARQL function symbols and other function symbols that cannot be directly serialized into SQL.")])]),e._v(" "),a("h3",{attrs:{id:"db-datatype-factory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#db-datatype-factory"}},[e._v("#")]),e._v(" DB Datatype factory")]),e._v(" "),a("p",[e._v("The "),a("em",[e._v("DB datatype factory")]),e._v(" declares the hierarchy of DB datatypes used by the DBMS, and specifies their correspondence with datatypes used in the RDF graphs (such as xsd datatypes).")]),e._v(" "),a("p",[e._v("The interface to implement (for SQL dialects) is "),a("code",[e._v("SQLDBTypeFactory")]),e._v("."),a("br"),e._v("\nAnd the default implementation is "),a("code",[e._v("DefaultSQLDBTypeFactory")]),e._v(" .")]),e._v(" "),a("p",[e._v("For instance, the datatype factory for PostgreSQL within Ontop is the class "),a("code",[e._v("PostgreSQLDBTypeFactory")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"optional-implementations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#optional-implementations"}},[e._v("#")]),e._v(" Optional implementations")]),e._v(" "),a("p",[e._v("Additional implementations can be optionally provided in replacement of the default implementation.")]),e._v(" "),a("h3",{attrs:{id:"serializer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serializer"}},[e._v("#")]),e._v(" Serializer")]),e._v(" "),a("p",[e._v("The "),a("em",[e._v("serializer")]),e._v(" dictates the general shape (SELECT-FROM-WHERE) of the SQL query.")]),e._v(" "),a("p",[e._v("The interface to implement is "),a("code",[e._v("SelectFromWhereSerializer")]),e._v("."),a("br"),e._v("\nAnd the default implementation is "),a("code",[e._v("DefaultSelectFromWhereSerializer")]),e._v(".")]),e._v(" "),a("p",[e._v("For instance, the serializer for PostgreSQL within Ontop is the class "),a("code",[e._v("PostgresSelectFromWhereSerializer")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"normalizer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#normalizer"}},[e._v("#")]),e._v(" Normalizer")]),e._v(" "),a("p",[e._v("The "),a("em",[e._v("normalizer")]),e._v(" addresses limitations of certain DBMSs (such as a non-canonical evaluation of the ORDER BY clause).")]),e._v(" "),a("p",[e._v("The interface to implement is "),a("code",[e._v("DialectExtraNormalizer")]),e._v("."),a("br"),e._v("\nAnd several implementations are already available, some of which are used by several DBMS.")]),e._v(" "),a("p",[e._v("For instance, the normalizer associated to PostgreSQL within Ontop is "),a("code",[e._v("OnlyInPresenceOfDistinctProjectOrderByTermsNormalizer")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"metadata-provider"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#metadata-provider"}},[e._v("#")]),e._v(" Metadata provider")]),e._v(" "),a("p",[e._v("The "),a("em",[e._v("metadata provider")]),e._v(" specifies how schema and integrity constraints (for instance primary keys) are retrieved from the DBMS.")]),e._v(" "),a("p",[e._v("The interface to implement is "),a("code",[e._v("MetadataProvider")]),e._v("."),a("br"),e._v("\nAnd the default implementation is "),a("code",[e._v("DefaultDBMetadataProvider")]),e._v(".")]),e._v(" "),a("p",[e._v("For instance, the metadata provider for PostgreSQL within Ontop is "),a("code",[e._v("PostgreSQLDBMetadataProvider")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"declaring-an-implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#declaring-an-implementation"}},[e._v("#")]),e._v(" Declaring an implementation")]),e._v(" "),a("p",[e._v("All the implementations mentioned above can be declared in the property file "),a("code",[e._v("sql-default.properties")]),e._v(" (which can be found in the directory "),a("code",[e._v("it/unibz/inf/ontop/injection/")]),e._v(" of the "),a("code",[e._v("ontop-rdb")]),e._v(" module).")]),e._v(" "),a("p",[e._v("A key-value pair must be added for each of these implementations, where the key indicates the type of the implementation (serializer, function symbol factory, etc.), and the value is the implementation.")]),e._v(" "),a("p",[e._v("The naming scheme for the keys is the following."),a("br"),e._v("\nLet "),a("code",[e._v("<driverName>")]),e._v(" be the name of the JDBC driver for the RDBMS (for instance, the JDBC driver for PostgreSQL is "),a("code",[e._v("org.postgresql.Driver")]),e._v("."),a("br"),e._v("\nThen the keys are:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("<driverName>-serializer")]),e._v(" for a serializer")]),e._v(" "),a("li",[a("code",[e._v("<driverName>-symbolFactory")]),e._v(" for a DB function symbol factory")]),e._v(" "),a("li",[a("code",[e._v("<driverName>-typeFactory")]),e._v(" for a DB datatype factory")]),e._v(" "),a("li",[a("code",[e._v("<driverName>-normalizer")]),e._v(" for a normalizer")]),e._v(" "),a("li",[a("code",[e._v("<driverName>-metadataProvider")]),e._v(" for a metadata provider")])]),e._v(" "),a("p",[e._v("For instance, the key-value pairs declared for PostgreSQL are:")]),e._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("org.postgresql.Driver-serializer")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("it.unibz.inf.ontop.generation.serializer.impl.PostgresSelectFromWhereSerializer")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("org.postgresql.Driver-symbolFactory")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("it.unibz.inf.ontop.model.term.functionsymbol.db.impl.PostgreSQLDBFunctionSymbolFactory")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("org.postgresql.Driver-typeFactory")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("it.unibz.inf.ontop.model.type.impl.PostgreSQLDBTypeFactory")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("org.postgresql.Driver-normalizer")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("it.unibz.inf.ontop.generation.normalization.impl.OnlyInPresenceOfDistinctProjectOrderByTermsNormalizer")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("org.postgresql.Driver-metadataProvider")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("it.unibz.inf.ontop.dbschema.impl.PostgreSQLDBMetadataProvider")]),e._v("\n")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);