(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{413:function(t,e,n){"use strict";n.r(e);var a=n(51),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"command-line-interface"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#command-line-interface"}},[t._v("#")]),t._v(" Command Line Interface")]),t._v(" "),n("p",[t._v("Ontop ships a shell script ("),n("code",[t._v("ontop")]),t._v(" for *nix)  and a bat file ("),n("code",[t._v("ontop.bat")]),t._v(" for Windows) exposing the core functionality and several utilities through the command line interface. It is an easy way to get the system quickly set-up, test for correct execution, and query or materialize as needed.")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#setup-ontop-cli"}},[t._v("Setup")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#ontop-endpoint"}},[t._v("ontop endpoint")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#ontop-materialize"}},[t._v("ontop materialize")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#ontop-mapping"}},[t._v("ontop mapping")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#ontop-bootstrap"}},[t._v("ontop bootstrap")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#ontop-query"}},[t._v("ontop query")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#ontop-extract-db-metadata"}},[t._v("ontop extract-db-metadata")])])]),t._v(" "),n("h2",{attrs:{id:"setup-ontop-cli"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setup-ontop-cli"}},[t._v("#")]),t._v(" Setup Ontop CLI")]),t._v(" "),n("p",[t._v("First, you have to download Ontop latest CLI zip from our download pages ("),n("a",{attrs:{href:"https://github.com/ontop/ontop/releases",target:"_blank",rel:"noopener"}},[t._v("Github"),n("OutboundLink")],1),t._v(" or "),n("a",{attrs:{href:"https://sourceforge.net/projects/ontop4obda/files/",target:"_blank",rel:"noopener"}},[t._v("Sourceforge"),n("OutboundLink")],1),t._v(").\nUnzip it in a folder. Open the command line terminal and cd to that folder.\nFor Windows use the "),n("code",[t._v("ontop.bat")]),t._v(" file, for Linux and OS X use the "),n("code",[t._v("ontop")]),t._v(" file.")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ ./ontop help\nusage: ontop <command> [ <args> ]\n\nCommands are:\n    --version             Show version of ontop\n    bootstrap             Bootstrap ontology and mapping from the database\n    endpoint              Start a SPARQL endpoint powered by Ontop\n    extract-db-metadata   Extract the DB metadata and serialize it into an output JSON file\n    help                  Display help information\n    materialize           Materialize the RDF graph exposed by the mapping and the OWL ontology\n    query                 Query the RDF graph exposed by the mapping and the OWL ontology\n    validate              Validate Ontology and Mappings\n    mapping               Manipulate mapping files\n")])])]),n("h3",{attrs:{id:"jdbc-configuration"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jdbc-configuration"}},[t._v("#")]),t._v(" JDBC configuration")]),t._v(" "),n("p",[t._v("JDBC drivers are software implemented by third parties (often the same developers of the database system) that handle interaction with the database in their own proprietary protocols.\nYou will need to manually download the JDBC drivers for your database management system (e.g., "),n("a",{attrs:{href:"https://jdbc.postgresql.org/",target:"_blank",rel:"noopener"}},[t._v("PostgreSQL JDBC drivers"),n("OutboundLink")],1),t._v(") and put them into the "),n("code",[t._v("jdbc")]),t._v(" directory.")]),t._v(" "),n("h3",{attrs:{id:"path"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#path"}},[t._v("#")]),t._v(" PATH")]),t._v(" "),n("p",[t._v("Consider putting the directory of ontop to your "),n("code",[t._v("PATH")]),t._v(".")]),t._v(" "),n("h3",{attrs:{id:"property-file"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#property-file"}},[t._v("#")]),t._v(" Property file")]),t._v(" "),n("p",[t._v("Most commands below require or accept as input a property file.\nThis is where you will specify the JDBC connection parameters.\nA basic property file template can be found "),n("a",{attrs:{href:"/properties/basic.properties"}},[t._v("here")]),t._v(".")]),t._v(" "),n("h2",{attrs:{id:"ontop-endpoint"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ontop-endpoint"}},[t._v("#")]),t._v(" "),n("code",[t._v("ontop endpoint")])]),t._v(" "),n("p",[n("code",[t._v("ontop endpoint")]),t._v(" deploys a SPARQL endpoint locally at the address "),n("code",[t._v("/sparql")]),t._v(" and by default on the port 8080. It powers "),n("a",{attrs:{href:"https://hub.docker.com/r/ontop/ontop",target:"_blank",rel:"noopener"}},[t._v("our official Docker"),n("OutboundLink")],1),t._v(", so feel free to use the Docker image instead of the CLI command if it is more convenient for you.")]),t._v(" "),n("p",[t._v("It offers several advanced options:")]),t._v(" "),n("ul",[n("li",[n("em",[t._v("Lazy initialization:")]),t._v(" Ontop offline tasks (such as DB metadata extraction and mapping processing) are triggered after receiving the first SPARQL query. This is useful when using a Docker-Compose with Ontop and a DB image that needs to be initialized first.")]),t._v(" "),n("li",[n("em",[t._v("Development mode (since 4.0-beta-1):")]),t._v(" restarts the endpoint every time the configuration files are changed. It also exposes a GET/POST method "),n("code",[t._v("/ontop/reformulate")]),t._v(" accepting a SPARQL query as param as any SPARQL endpoint but returning the reformulated SQL query as result.")]),t._v(" "),n("li",[n("em",[t._v("Portal (since 4.0-beta-1):")]),t._v(" Includes groups of pre-defined SPARQL queries into the welcome page. See the following "),n("a",{attrs:{href:"/examples/example-portal.toml"}},[t._v("example of portal file")]),t._v(" in the TOML format.")]),t._v(" "),n("li",[n("em",[n("a",{attrs:{href:"/guide/advanced/predefined"}},[t._v("Predefined query endpoint")]),t._v(" (since 4.1.0)")])]),t._v(" "),n("li",[n("em",[t._v("Ontology made downloadable (since 4.2.0)")]),t._v(".")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ ./ontop help endpoint\nNAME\n        ontop endpoint - Start a SPARQL endpoint powered by Ontop\n\nSYNOPSIS\n        ontop endpoint [ {-c | --constraint} <constraint file> ]\n                [ --contexts <JSON-LD context file for predefined queries> ]\n                [ --cors-allowed-origins <origins> ]\n                [ {-d | --db-metadata} <db-metadata file> ]\n                [ --db-driver <DB driver> ] [ --db-password <DB password> ]\n                [ --db-url <DB URL> ] [ --dev ] [ --disable-portal-page ]\n                [ --enable-annotations ] [ --enable-download-ontology ]\n                [ {-l | --lenses | -v | --ontop-views} <lenses file> ]\n                [ --lazy ] {-m | --mapping} <mapping file>\n                [ {-p | --properties} <properties file> ] [ --port <port> ]\n                [ --portal <endpoint portal file> ]\n                [ --predefined-config <predefined query JSON config file> ]\n                [ --predefined-queries <predefined query TOML file> ]\n                [ --sparql-rules <SPARQL rules file> ]\n                [ {-t | --ontology} <ontology file> ]\n                [ {-u | --db-user} <DB user> ]\n                [ {-x | --xml-catalog} <xml catalog file> ]\n\nOPTIONS\n        -c <constraint file>, --constraint <constraint file>\n            User-supplied DB constraint file\n\n        --contexts <JSON-LD context file for predefined queries>\n            File containing JSON-LD contexts for predefined queries\n\n        --cors-allowed-origins <origins>\n            CORS allowed origins\n\n        -d <db-metadata file>, --db-metadata <db-metadata file>\n            User-supplied db-metadata file\n\n        --db-driver <DB driver>\n            DB driver (overrides the properties)\n\n        --db-password <DB password>\n            DB password (overrides the properties)\n\n        --db-url <DB URL>\n            DB URL (overrides the properties)\n\n        --dev\n            development mode\n\n        --disable-portal-page\n            Disable the portal page (/index.html) of the SPARQL endpoint.\n\n        --enable-annotations\n            enable annotation properties defined in the ontology. Default:\n            false\n\n        --enable-download-ontology\n            Allow to download the ontology as a plain text file (/ontology).\n            Default: false\n\n        -l <lenses file>, --lenses <lenses file>, -v <lenses file>,\n        --ontop-views <lenses file>\n            User-supplied lenses file. Lenses were formerly named Ontop views.\n\n        --lazy\n            lazy initialization\n\n        -m <mapping file>, --mapping <mapping file>\n            Mapping file in R2RML (.ttl) or in Ontop native format (.obda)\n\n        -p <properties file>, --properties <properties file>\n            Properties file\n\n        --port <port>\n            port of the SPARQL endpoint\n\n        --portal <endpoint portal file>\n            endpoint portal file (including title and queries)\n\n        --predefined-config <predefined query JSON config file>\n            predefined query config file\n\n            This option is required if any of the following options are\n            specified: --predefined-queries\n\n\n        --predefined-queries <predefined query TOML file>\n            predefined SPARQL queries file\n\n            This option is required if any of the following options are\n            specified: --predefined-config\n\n\n        --sparql-rules <SPARQL rules file>\n            User-supplied SPARQL rules file\n\n        -t <ontology file>, --ontology <ontology file>\n            OWL ontology file\n\n        -u <DB user>, --db-user <DB user>\n            DB user (overrides the properties)\n\n        -x <xml catalog file>, --xml-catalog <xml catalog file>\n            XML Catalog file (e.g. catalog-v001.xml generated by Protege) for\n            redirecting ontologies imported by owl:imports\n")])])]),n("h3",{attrs:{id:"example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ ./ontop endpoint -m university-complete.obda \\\n                   -t university-complete.ttl \\\n                   -p university-complete.properties \\\n                   --cors-allowed-origins=*\n")])])]),n("h2",{attrs:{id:"ontop-materialize"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ontop-materialize"}},[t._v("#")]),t._v(" "),n("code",[t._v("ontop materialize")])]),t._v(" "),n("p",[t._v('This command provides a "materialization utility". Materialization is helpful when you want to generate RDF data out of your database, using the provided mappings. This utility will take all the triples that the mapping can produce from the data source, and write them to the output. '),n("code",[t._v("ontop materialize")]),t._v(" does not need any query file, but instead, needs the user to specify a format in which he/she wants the output (either to terminal or output file). The user can choose between three output formats: "),n("a",{attrs:{href:"https://www.w3.org/TR/2014/REC-turtle-20140225/",target:"_blank",rel:"noopener"}},[t._v("Turtle"),n("OutboundLink")],1),t._v(", "),n("a",{attrs:{href:"https://www.w3.org/TR/2014/REC-n-triples-20140225/",target:"_blank",rel:"noopener"}},[t._v("N-triples"),n("OutboundLink")],1),t._v(" or "),n("a",{attrs:{href:"https://www.w3.org/TR/2014/REC-rdf-syntax-grammar-20140225/",target:"_blank",rel:"noopener"}},[t._v("RDF/XML"),n("OutboundLink")],1),t._v(". For very large datasets, producing the output might take some time.")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ ./ontop help materialize\nNAME\n        ontop materialize - Materialize the RDF graph exposed by the mapping\n        and the OWL ontology\n\nSYNOPSIS\n        ontop materialize [ {-c | --constraint} <constraint file> ]\n                [ {-d | --db-metadata} <db-metadata file> ]\n                [ --db-driver <DB driver> ] [ --db-password <DB password> ]\n                [ --db-url <DB URL> ] [ --enable-annotations ]\n                [ {-f | --format} <outputFormat> ]\n                [ {-l | --lenses | -v | --ontop-views} <lenses file> ]\n                {-m | --mapping} <mapping file> [ --no-streaming ]\n                [ {-o | --output} <output> ]\n                [ {-p | --properties} <properties file> ] [ --separate-files ]\n                [ --sparql-rules <SPARQL rules file> ]\n                [ {-t | --ontology} <ontology file> ]\n                [ {-u | --db-user} <DB user> ]\n                [ {-x | --xml-catalog} <xml catalog file> ]\n\nOPTIONS\n        -c <constraint file>, --constraint <constraint file>\n            User-supplied DB constraint file\n\n        -d <db-metadata file>, --db-metadata <db-metadata file>\n            User-supplied db-metadata file\n\n        --db-driver <DB driver>\n            DB driver (overrides the properties)\n\n        --db-password <DB password>\n            DB password (overrides the properties)\n\n        --db-url <DB URL>\n            DB URL (overrides the properties)\n\n        --enable-annotations\n            enable annotation properties defined in the ontology. Default:\n            false\n\n        -f <outputFormat>, --format <outputFormat>\n            The format of the materialized ontology. Default: rdfxml\n\n            This options value is restricted to the following set of values:\n                rdfxml\n                turtle\n                ntriples\n                nquads\n                trig\n                jsonld\n\n        -l <lenses file>, --lenses <lenses file>, -v <lenses file>,\n        --ontop-views <lenses file>\n            User-supplied lenses file. Lenses were formerly named Ontop views.\n\n        -m <mapping file>, --mapping <mapping file>\n            Mapping file in R2RML (.ttl) or in Ontop native format (.obda)\n\n        --no-streaming\n            All the SQL results of one big query will be stored in memory. Not\n            recommended. Default: false.\n\n        -o <output>, --output <output>\n            output file (default) or prefix (only for --separate-files)\n\n        -p <properties file>, --properties <properties file>\n            Properties file\n\n        --separate-files\n            generating separate files for different classes/properties. This is\n            useful for materializing large OBDA setting. Default: false.\n\n        --sparql-rules <SPARQL rules file>\n            User-supplied SPARQL rules file\n\n        -t <ontology file>, --ontology <ontology file>\n            OWL ontology file\n\n        -u <DB user>, --db-user <DB user>\n            DB user (overrides the properties)\n\n        -x <xml catalog file>, --xml-catalog <xml catalog file>\n            XML Catalog file (e.g. catalog-v001.xml generated by Protege) for\n            redirecting ontologies imported by owl:imports\n")])])]),n("p",[t._v("Example:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ ./ontop materialize -m university-complete.obda \\\n                      -t university-complete.ttl \\\n                      -p university-complete.properties \\\n                      -f turtle \\\n                      -o materialized-triples.ttl\n")])])]),n("h2",{attrs:{id:"ontop-mapping"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ontop-mapping"}},[t._v("#")]),t._v(" "),n("code",[t._v("ontop mapping")])]),t._v(" "),n("p",[t._v("This command collects several useful sub-commands for dealing with mappings files.")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ ./ontop help mapping\nNAME\n        ontop mapping - Manipulate mapping files\n\nSYNOPSIS\n        ontop mapping { pretty-r2rml | to-obda | to-r2rml | v1-to-v3 } [--]\n                [cmd-options]\n\n        Where command-specific options [cmd-options] are:\n            pretty-r2rml: {-i | --input} <input.ttl> {-o | --output}\n                    <pretty.ttl>\n            to-obda: {-i | --input} <mapping.ttl> [ {-o | --output} <mapping.obda> ]\n            to-r2rml: [ {-l | --lenses | -v | --ontop-views} <lenses file> ] [ {-t | --ontology} <ontology.owl> ]\n                    {-i | --input} <mapping.obda> [ {-o | --output} <mapping.ttl> ]\n                    [ {-p | --properties} <properties file> ] [ {-d | --db-metadata} <db-metadata file> ]\n                    [ --force ]\n            v1-to-v3: [ --simplify-projection ] {-m | --mapping} <mapping file>\n                    [ --overwrite ] [ {-o | --output} <mapping.obda> ]\n\n        See 'ontop help mapping <command>' for more information on a specific command.\n")])])]),n("h3",{attrs:{id:"ontop-mapping-to-r2rml"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ontop-mapping-to-r2rml"}},[t._v("#")]),t._v(" "),n("code",[t._v("ontop mapping to-r2rml")])]),t._v(" "),n("p",[t._v("Supports automatically converting mappings from Ontop native format ("),n("code",[t._v(".obda")]),t._v(") to the "),n("a",{attrs:{href:"http://www.w3.org/TR/2012/REC-r2rml-20120927/",target:"_blank",rel:"noopener"}},[t._v("R2RML"),n("OutboundLink")],1),t._v(" standard format. Since 4.1.0, by default, it expects DB credentials (for extracting the DB metadata) or a DB metadata file. This requirement can be bypassed using the option "),n("code",[t._v("--force")]),t._v(".")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ ./ontop help mapping to-r2rml\nNAME\n        ontop mapping to-r2rml - Convert ontop native mapping format (.obda) to\n        R2RML format\n\nSYNOPSIS\n        ontop mapping to-r2rml [ {-d | --db-metadata} <db-metadata file> ]\n                [ --force ] {-i | --input} <mapping.obda>\n                [ {-l | --lenses | -v | --ontop-views} <lenses file> ]\n                [ {-o | --output} <mapping.ttl> ]\n                [ {-p | --properties} <properties file> ]\n                [ {-t | --ontology} <ontology.owl> ]\n\nOPTIONS\n        -d <db-metadata file>, --db-metadata <db-metadata file>\n            User-supplied db-metadata file\n\n        --force\n            Force the conversion in the absence of DB metadata\n\n        -i <mapping.obda>, --input <mapping.obda>\n            Input mapping file in Ontop native format (.obda)\n\n        -l <lenses file>, --lenses <lenses file>, -v <lenses file>,\n        --ontop-views <lenses file>\n            User-supplied lenses file. Lenses were formerly named Ontop views.\n\n        -o <mapping.ttl>, --output <mapping.ttl>\n            Output mapping file in R2RML format (.ttl)\n\n        -p <properties file>, --properties <properties file>\n            Properties file\n\n        -t <ontology.owl>, --ontology <ontology.owl>\n            OWL ontology file\n")])])]),n("h3",{attrs:{id:"ontop-mapping-to-obda"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ontop-mapping-to-obda"}},[t._v("#")]),t._v(" "),n("code",[t._v("ontop mapping to-obda")])]),t._v(" "),n("p",[t._v("Supports automatically converting mappings from "),n("a",{attrs:{href:"http://www.w3.org/TR/2012/REC-r2rml-20120927/",target:"_blank",rel:"noopener"}},[t._v("R2RML"),n("OutboundLink")],1),t._v(" standard format to Ontop native format ("),n("code",[t._v(".obda")]),t._v("):")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ ./ontop help mapping to-obda\nNAME\n        ontop mapping to-obda - Convert R2RML format to ontop native mapping\n        format (.obda)\n\nSYNOPSIS\n        ontop mapping to-obda {-i | --input} <mapping.ttl>\n                [ {-o | --output} <mapping.obda> ]\n\nOPTIONS\n        -i <mapping.ttl>, --input <mapping.ttl>\n            Input mapping file in R2RML format (.ttl)\n\n        -o <mapping.obda>, --output <mapping.obda>\n            Output mapping file in Ontop native format (.obda)\n")])])]),n("h3",{attrs:{id:"ontop-mapping-pretty-r2rml"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ontop-mapping-pretty-r2rml"}},[t._v("#")]),t._v(" "),n("code",[t._v("ontop mapping pretty-r2rml")])]),t._v(" "),n("p",[t._v("Provides automatic formatting and prettifying facilities for mappings files:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ ./ontop help mapping pretty-r2rml\nNAME\n        ontop mapping pretty-r2rml - prettify R2RML file using Jena\n\nSYNOPSIS\n        ontop mapping pretty-r2rml {-i | --input} <input.ttl>\n                {-o | --output} <pretty.ttl>\n\nOPTIONS\n        -i <input.ttl>, --input <input.ttl>\n            Input mapping file in the turtle R2RML format (.ttl)\n\n        -o <pretty.ttl>, --output <pretty.ttl>\n            Output mapping file in the turtle R2RML format (.ttl)\n")])])]),n("h2",{attrs:{id:"ontop-bootstrap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ontop-bootstrap"}},[t._v("#")]),t._v(" "),n("code",[t._v("ontop bootstrap")])]),t._v(" "),n("p",[t._v("This command allows the automatic generation of mappings and ontology starting from a database schema. The generated output can be used as-is or further customized manually (e.g., to used different ontological modeling choices and corresponding mappings). In both cases, it helps substantially reducing the user effort involved in setting up the ontology and mappings of a VKG specification.")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ ./ontop help bootstrap\nNAME\n        ontop bootstrap - Bootstrap ontology and mapping from the database\n\nSYNOPSIS\n        ontop bootstrap {-b | --base-iri} <base IRI>\n                [ --db-driver <DB driver> ] [ --db-password <DB password> ]\n                [ --db-url <DB URL> ] {-m | --mapping} <mapping file>\n                [ {-p | --properties} <properties file> ]\n                {-t | --ontology} <ontology file>\n                [ {-u | --db-user} <DB user> ]\n\nOPTIONS\n        -b <base IRI>, --base-iri <base IRI>\n            Base IRI of the generated mapping\n\n        --db-driver <DB driver>\n            DB driver (overrides the properties)\n\n        --db-password <DB password>\n            DB password (overrides the properties)\n\n        --db-url <DB URL>\n            DB URL (overrides the properties)\n\n        -m <mapping file>, --mapping <mapping file>\n            Output mapping file in the Ontop native format (.obda)\n\n        -p <properties file>, --properties <properties file>\n            Properties file\n\n        -t <ontology file>, --ontology <ontology file>\n            Output OWL ontology file\n\n        -u <DB user>, --db-user <DB user>\n            DB user (overrides the properties)\n")])])]),n("h2",{attrs:{id:"ontop-query"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ontop-query"}},[t._v("#")]),t._v(" "),n("code",[t._v("ontop query")])]),t._v(" "),n("p",[t._v("The "),n("code",[t._v("ontop query")]),t._v(" command is designed for helping users to test their system quickly using the command line utilities.\nYou can use this command if you already have a scenario test case including:")]),t._v(" "),n("ul",[n("li",[t._v("the ontology (RDFS or OWL) and the mappings (obda or R2RML) files,")]),t._v(" "),n("li",[t._v("a working database to connect to,")]),t._v(" "),n("li",[t._v("a SPARQL query file")])]),t._v(" "),n("p",[t._v("The "),n("code",[t._v("ontop query")]),t._v(" command helps you to set up the system, runs the query from the query string file over it, and gets the results either in output file or terminal output. What the script actually does is to set up Ontop using the ontology and the mapping files, parse the query from the file and execute it over the created instance of Ontop.")]),t._v(" "),n("p",[t._v("Note that "),n("code",[t._v("ontop query")]),t._v(" is NOT intended to be used in production and for benchmarking purposes. Most of its execution time is dedicated to offline tasks like DB metadata extraction and mapping processing. Query answering (i.e. answering the SPARQL query) takes usually much less time. For production and benchmarking purposes, please consider "),n("a",{attrs:{href:"#ontop-endpoint"}},[t._v("deploying Ontop as a SPARQL endpoint")]),t._v(".")]),t._v(" "),n("p",[t._v("The results are turned in the CSV format.")]),t._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("At the moment only SELECT queries are supported by this command. See "),n("a",{attrs:{href:"https://github.com/ontop/ontop/issues/222",target:"_blank",rel:"noopener"}},[t._v("#222"),n("OutboundLink")],1),t._v(".")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ ./ontop help query\nNAME\n        ontop query - Query the RDF graph exposed by the mapping and the OWL\n        ontology\n\nSYNOPSIS\n        ontop query [ {-c | --constraint} <constraint file> ]\n                [ {-d | --db-metadata} <db-metadata file> ]\n                [ --db-driver <DB driver> ] [ --db-password <DB password> ]\n                [ --db-url <DB URL> ] [ --enable-annotations ]\n                [ {-l | --lenses | -v | --ontop-views} <lenses file> ]\n                {-m | --mapping} <mapping file> [ {-o | --output} <output> ]\n                [ {-p | --properties} <properties file> ]\n                {-q | --query} <queryFile>\n                [ --sparql-rules <SPARQL rules file> ]\n                [ {-t | --ontology} <ontology file> ]\n                [ {-u | --db-user} <DB user> ]\n                [ {-x | --xml-catalog} <xml catalog file> ]\n\nOPTIONS\n        -c <constraint file>, --constraint <constraint file>\n            User-supplied DB constraint file\n\n        -d <db-metadata file>, --db-metadata <db-metadata file>\n            User-supplied db-metadata file\n\n        --db-driver <DB driver>\n            DB driver (overrides the properties)\n\n        --db-password <DB password>\n            DB password (overrides the properties)\n\n        --db-url <DB URL>\n            DB URL (overrides the properties)\n\n        --enable-annotations\n            enable annotation properties defined in the ontology. Default:\n            false\n\n        -l <lenses file>, --lenses <lenses file>, -v <lenses file>,\n        --ontop-views <lenses file>\n            User-supplied lenses file. Lenses were formerly named Ontop views.\n\n        -m <mapping file>, --mapping <mapping file>\n            Mapping file in R2RML (.ttl) or in Ontop native format (.obda)\n\n        -o <output>, --output <output>\n            output file in the CSV format. If not specified, will print the\n            results in the standard output.\n\n        -p <properties file>, --properties <properties file>\n            Properties file\n\n        -q <queryFile>, --query <queryFile>\n            SPARQL SELECT query file\n\n        --sparql-rules <SPARQL rules file>\n            User-supplied SPARQL rules file\n\n        -t <ontology file>, --ontology <ontology file>\n            OWL ontology file\n\n        -u <DB user>, --db-user <DB user>\n            DB user (overrides the properties)\n\n        -x <xml catalog file>, --xml-catalog <xml catalog file>\n            XML Catalog file (e.g. catalog-v001.xml generated by Protege) for\n            redirecting ontologies imported by owl:imports\n")])])]),n("h3",{attrs:{id:"example-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-1"}},[t._v("#")]),t._v(" Example 1")]),t._v(" "),n("p",[t._v("Execute a SPARQL query using Ontop mappings.")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$  ./ontop query -m university-complete.obda \\\n                 -t university-complete.owl \\\n                 -p university-complete.properties \\\n                 -q q1.txt\n\nx\nhttp://www.Department0.University0.edu/GraduateStudent44\nhttp://www.Department0.University0.edu/GraduateStudent101\nhttp://www.Department0.University0.edu/GraduateStudent124\nhttp://www.Department0.University0.edu/GraduateStudent142\n")])])]),n("p",[t._v("where "),n("code",[t._v("q1.txt")]),t._v(" contains the SPARQL query, e.g.:")]),t._v(" "),n("div",{staticClass:"language-sparql extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sparql"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PREFIX")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[n("span",{pre:!0,attrs:{class:"token prefix"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")])])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token url"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("http://example.org/voc#"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("?x")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("?x")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("a")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[n("span",{pre:!0,attrs:{class:"token prefix"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")])]),n("span",{pre:!0,attrs:{class:"token local-name"}},[t._v("GraduateStudent")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"example-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-2"}},[t._v("#")]),t._v(" Example 2")]),t._v(" "),n("p",[t._v("Execute a SPARQL query using R2RML mappings and output the query result to a file.")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ ./ontop query -m university-complete.ttl \\\n                -t university-complete.owl \\\n                -p university-complete.properties \\\n                -q q1.txt \\\n                -o q1.csv\n\n$ cat q1.csv\nx\nhttp://www.Department0.University0.edu/GraduateStudent44\nhttp://www.Department0.University0.edu/GraduateStudent101\nhttp://www.Department0.University0.edu/GraduateStudent124\nhttp://www.Department0.University0.edu/GraduateStudent142\n")])])]),n("h2",{attrs:{id:"ontop-extract-db-metadata"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ontop-extract-db-metadata"}},[t._v("#")]),t._v(" "),n("code",[t._v("ontop extract-db-metadata")])]),t._v(" "),n("p",[n("em",[t._v("Stable since 4.1.0")]),t._v(".")]),t._v(" "),n("p",[t._v("This command extracts the metadata from the database and serializes it into a JSON file.\nThis file can later on be passed as an argument to many other commands.")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("$ ./ontop help extract-db-metadata\nNAME\n        ontop extract-db-metadata - Extract the DB metadata and serialize it\n        into an output JSON file\n\nSYNOPSIS\n        ontop extract-db-metadata [ {-o | --output} <output> ]\n                {-p | --properties} <properties file>\n\nOPTIONS\n        -o <output>, --output <output>\n            output file\n\n        -p <properties file>, --properties <properties file>\n            Properties file\n")])])]),n("h3",{attrs:{id:"example-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-3"}},[t._v("#")]),t._v(" Example")]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[t._v("$ ./ontop extract-db-metadata -p mobility.properties -o db-metadata.json\n")])])]),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"relations"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"uniqueConstraints"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"metadata_pkey"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"determinants"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"id\\""')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"isPrimaryKey"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"foreignKeys"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fk_metadata_station_id_station_pk"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"from"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"relation"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"mobility\\""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"metadata\\""')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"columns"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"station_id\\""')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"to"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"relation"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"mobility\\""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"station\\""')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"columns"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"id\\""')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"columns"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"id\\""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"isNullable"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"datatype"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bigserial"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"created_on\\""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"isNullable"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"datatype"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"timestamp"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"json\\""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"isNullable"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"datatype"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jsonb"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"station_id\\""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"isNullable"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"datatype"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int8"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"mobility\\""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"metadata\\""')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"uniqueConstraints"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"station_pkey"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"determinants"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"id\\""')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"isPrimaryKey"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uc_station_stationcode_stationtype"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"determinants"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"stationcode\\""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"stationtype\\""')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"isPrimaryKey"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"columns"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"id\\""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"isNullable"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"datatype"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bigserial"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"name\\""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"isNullable"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"datatype"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"varchar(255)"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"stationtype\\""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"isNullable"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"datatype"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"varchar(255)"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"mobility\\""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\"station\\""')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"metadata"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"dbmsProductName"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"PostgreSQL"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"dbmsVersion"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"13.1"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"driverName"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"PostgreSQL JDBC Driver"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"driverVersion"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"42.2.8"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"quotationString"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"extractionTime"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2021-02-25T15:56:09"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"idFactoryType"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"POSTGRESQL"')]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);